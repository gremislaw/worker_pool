package cmd

import (
	"fmt"
	"os"
	"strconv"
	"strings"
	"worker_pool/pool"

	"github.com/charmbracelet/bubbles/spinner"
	"github.com/charmbracelet/bubbles/textinput"
	tea "github.com/charmbracelet/bubbletea"
	"github.com/charmbracelet/lipgloss"
)

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
type model struct {
	cursor  int
	choice  string
	inputs  []textinput.Model
	frame   int
	spinner spinner.Model
	wp      *pool.WorkerPool
}

// –û—Å–Ω–æ–≤–∞ –¥–ª—è —Å—Ç–∏–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–π—Ñ–µ–π—Å–∞
var (
	mainStyle     = lipgloss.NewStyle().MarginLeft(2)
	subtleStyle   = lipgloss.NewStyle().Foreground(lipgloss.Color("241"))
	cursorStyle   = lipgloss.NewStyle().Foreground(lipgloss.Color("212"))
	blurredStyle  = lipgloss.NewStyle().Foreground(lipgloss.Color("240"))
	textStyle     = lipgloss.NewStyle().Foreground(lipgloss.Color("111"))
	noStyle       = lipgloss.NewStyle()
	focusedButton = cursorStyle.Render("[ Submit ]")
	blurredButton = fmt.Sprintf("[ %s ]", blurredStyle.Render("Submit"))
)

// –í–∞—Ä–∏–∞–Ω—Ç—ã –≤—ã–±–æ—Ä–∞ —Ñ—É–Ω–∫—Ü–∏–π –≤ TUI
var choices = []string{"–î–æ–±–∞–≤–∏—Ç—å Jobs", "–î–æ–±–∞–≤–∏—Ç—å Workers", "–£–¥–∞–ª–∏—Ç—å Workers"}

// –ó–∞–ø—É—Å–∫ TUI
func Run(wp *pool.WorkerPool) {
	if _, err := tea.NewProgram(model{wp: wp}).Run(); err != nil {
		fmt.Println("–û, –Ω–µ—Ç:", err)
		os.Exit(1)
	}
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ –¥–ª—è —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
func (m model) Init() tea.Cmd {
	return tea.Batch(
		m.spinner.Tick,
	)
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –ø—Ä–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ —Å TUI
func (m model) Update(msg tea.Msg) (tea.Model, tea.Cmd) {
	switch m.frame {
	case 0:
		return m.UpdateMainFrame(msg)
	case 1:
		return m.UpdateInputFrame(msg)
	}
	return m, nil
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ —Ñ—Ä–µ–π–º–∞
func (m model) UpdateMainFrame(msg tea.Msg) (tea.Model, tea.Cmd) {
	switch msg := msg.(type) {
	case tea.KeyMsg:
		switch msg.String() {
		case "ctrl+c", "q", "esc": // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
			return m, tea.Quit

		case "enter": // –ó–∞–ø–∏—Å—å –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ –Ω–∞—à—É –º–æ–¥–µ–ª—å.
			m.choice = choices[m.cursor]
			m.frame = 1
			m.cursor = 0
			m.getInputFrame()
			return m, nil
		case "down", "s": // –ü–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞ –≤–Ω–∏–∑
			m.cursor++
			if m.cursor >= len(choices) {
				m.cursor = 0
			}

		case "up", "w": // –ü–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞ –≤–≤–µ—Ä—Ö
			m.cursor--
			if m.cursor < 0 {
				m.cursor = len(choices) - 1
			}
		}
	case spinner.TickMsg:
		var cmd tea.Cmd
		m.spinner, cmd = m.spinner.Update(msg)
		return m, cmd
	}
	return m, nil
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ—Ä–µ–π–º–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
func (m model) UpdateInputFrame(msg tea.Msg) (tea.Model, tea.Cmd) {
	switch msg := msg.(type) {
	case tea.KeyMsg:
		switch msg.String() {
		case "ctrl+c", "esc", "q":
			return m, tea.Quit

		// –ü–æ—Å—Ç–∞–≤–∏—Ç—å –∫—É—Ä—Å–æ—Ä –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–µ –ø–æ–ª–µ
		case "tab", "shift+tab", "enter", "up", "down":
			s := msg.String()

			// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª enter –∫–æ–≥–¥–∞ –∫–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –±—ã–ª–∞ –Ω–∞ –∫—É—Ä—Å–æ—Ä—É
			if s == "enter" && m.cursor == len(m.inputs) {
				m.frame = 0
				m.ClickSubmitButton()
				return m, nil
			}

			// –î–≤–∏–∂–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö
			if s == "up" || s == "shift+tab" {
				m.cursor--
			} else {
				m.cursor++
			}

			// –î–≤–∏–∂–µ–Ω–∏–µ –≤–Ω–∏–∑
			if m.cursor > len(m.inputs) {
				m.cursor = 0
			} else if m.cursor < 0 {
				m.cursor = len(m.inputs)
			}

			cmds := make([]tea.Cmd, len(m.inputs))
			for i := 0; i <= len(m.inputs)-1; i++ {
				if i == m.cursor {
					// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫—É—Ä—Å–æ—Ä–∞
					cmds[i] = m.inputs[i].Focus()
					m.inputs[i].PromptStyle = cursorStyle
					m.inputs[i].TextStyle = cursorStyle
					continue
				}
				// –£–±–∏—Ä–∞–µ–º –∫—É—Ä—Å–æ—Ä
				m.inputs[i].Blur()
				m.inputs[i].PromptStyle = noStyle
				m.inputs[i].TextStyle = noStyle
			}

			return m, tea.Batch(cmds...)
		}
	case spinner.TickMsg:
		var cmd tea.Cmd
		m.spinner, cmd = m.spinner.Update(msg)
		return m, cmd
	}
	cmd := m.updateInputs(msg)
	return m, cmd
}

// –ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–π –ü—É–ª–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏
func (m *model) ClickSubmitButton() {
	switch m.choice {
	case choices[0]: // AddJobs
		n, _ := strconv.Atoi(m.inputs[0].Value())
		s := m.inputs[1].Value()
		go m.wp.AddJobs(n, s)
	case choices[1]: // AddWorkers
		n, _ := strconv.Atoi(m.inputs[0].Value())
		go m.wp.AddWorkers(n)
	case choices[2]: // DeleteJobs
		n, _ := strconv.Atoi(m.inputs[0].Value())
		go m.wp.DeleteWorkers(n)
	}
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ—Ä–µ–π–º–∞
func (m *model) getInputFrame() {
	switch m.choice {
	case choices[0]: // AddJob
		m.getJobFrame()
	case choices[1]: // Worker
		m.getWorkerFrame()
	case choices[2]: // DeleteJob
		m.getWorkerFrame()
	}
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ—Ä–µ–π–º–∞ –¥–∂–æ–±–æ–≤
func (m *model) getJobFrame() {
	m.inputs = make([]textinput.Model, 2)
	var t textinput.Model
	for i := range m.inputs {
		t = textinput.New()
		t.Cursor.Style = cursorStyle
		t.CharLimit = 32

		switch i {
		case 0:
			t.Placeholder = "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ job'–æ–≤"
			t.Focus()
			t.PromptStyle = cursorStyle
			t.TextStyle = cursorStyle
		case 1:
			t.Placeholder = "–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ job'–∞—Ö"
			t.CharLimit = 64
		}

		m.inputs[i] = t
	}
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ—Ä–µ–π–º–∞ –≤–æ—Ä–∫–µ—Ä–æ–≤
func (m *model) getWorkerFrame() {
	m.inputs = make([]textinput.Model, 1)
	var t textinput.Model
	for i := range m.inputs {
		t = textinput.New()
		t.Cursor.Style = cursorStyle
		t.CharLimit = 32
		t.Placeholder = "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ worker'–æ–≤"
		t.Focus()
		t.PromptStyle = cursorStyle
		t.TextStyle = cursorStyle
		m.inputs[i] = t
	}
}

// –ü–æ–ª—É—á–µ–Ω–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫ –≤ –æ–∫–Ω–µ –≤–≤–æ–¥–∞
func (m *model) updateInputs(msg tea.Msg) tea.Cmd {
	cmds := make([]tea.Cmd, len(m.inputs))
	for i := range m.inputs {
		m.inputs[i], cmds[i] = m.inputs[i].Update(msg)
	}

	return tea.Batch(cmds...)
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ TUI
func (m model) View() string {
	switch m.frame {
	case 0:
		return m.ViewMainFrame()
	case 1:
		return m.ViewInputFrame()
	}
	return ""
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ —Ñ—Ä–µ–π–º–∞
func (m model) ViewMainFrame() string {
	s := strings.Builder{}
	s.WriteString(textStyle.Render("\n"))
	s.WriteString(textStyle.Render("–î–æ—Ä–æ–≥–æ–π Senior, –í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é:)\n"))
	s.WriteString(textStyle.Render("\n"))
	for i := 0; i < len(choices); i++ {
		if m.cursor == i { // –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª–æ–∂–µ–Ω–∏—è –∫—É—Ä—Å–æ—Ä–∞
			s.WriteString(chosenView(choices[i]))
		} else {
			s.WriteString(choicesView(choices[i]))
		}
		s.WriteString("\n")
	}
	s.WriteString(m.subtleView())
	return mainStyle.Render(s.String())
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ñ—Ä–µ–π–º–∞ –≤–≤–æ–¥–∞
func (m model) ViewInputFrame() string {
	s := strings.Builder{}
	s.WriteString(textStyle.Render("\n"))
	s.WriteString(textStyle.Render("–î–æ—Ä–æ–≥–æ–π Senior, –í—ã –≤—ã–±—Ä–∞–ª–∏: "))
	s.WriteString(cursorStyle.Render("`" + m.choice + "`"))
	s.WriteString(textStyle.Render(" :)"))
	s.WriteString(textStyle.Render("\n\n"))
	for i := range m.inputs {
		s.WriteString(m.inputs[i].View())
		if i < len(m.inputs)-1 {
			s.WriteRune('\n')
		}
	}
	button := &blurredButton
	if m.cursor == len(m.inputs) {
		button = &focusedButton
	}
	fmt.Fprintf(&s, "\n\n%s\n", *button)
	s.WriteString(m.subtleView())
	return mainStyle.Render(s.String())
}

// –û—Ç—Ä–æ—Å–∏–æ–≤–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
func chosenView(label string) string {
	return cursorStyle.Render("[üçï] " + label)
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –Ω–µ–≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
func choicesView(label string) string {
	return "[  ] " + label
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø–æ–¥—Å–∫–∞–∑–æ–∫
func (m *model) subtleView() string {
	s := "\n"
	s += textStyle.Render("–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ Worker:", strconv.Itoa(m.wp.GetWorkersCnt()))
	s += "\n"
	s += textStyle.Render("–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ Job:", strconv.Itoa(m.wp.GetJobCnt()))
	s += "\n"
	s += subtleStyle.Render("w/s, up/down: –¥–≤–∏–∂–µ–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞, ") +
		subtleStyle.Render("enter: –≤—ã–±–æ—Ä, ") +
		subtleStyle.Render("q, esc: –≤—ã—Ö–æ–¥")
	s += "\n"
	return s
}
